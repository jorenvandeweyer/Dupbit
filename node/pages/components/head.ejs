<title><%= pageInfo.title %></title>
<link rel="shortcut icon" type="image/png" href="/images/icons/favicon/favicon@64px.png"/>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css" integrity="sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4" crossorigin="anonymous">
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.13/css/all.css" integrity="sha384-DNOHZ68U8hZfKXOrtjWvjxusGo9WQnrNx2sqG0tfsghAvtVlRW3tvkXWZh58N9jp" crossorigin="anonymous">

<style>
@font-face {
    font-family: Hiragino Kaku Gothic Std;
    src: url(/fonts/custom.otf);
}

.alert {
	padding: 7px 35px 7px 10px;
	margin-bottom: 15px;
}
@media screen and (min-width: 1280px) {
	.dropdown-menu>li>span {
		color: #333;
	}
}
.table {
	margin-top: 20px;
}
.form-control-feedback{
	z-index: 4;
}
.has-feedback label~.form-control-feedback {
    top: 15px;
}
.help-block {
    font-size: 14px;
	margin: 0;
}
.input-group-info {
	display: block;
	font-size: 8pt;
	font-weight: bold;
	padding: 0 12px;
	margin: 0;
	background-color: #eee;
	border: 1px solid #ccc;
	border-bottom: 0;
}
.has-error {
    color: #a94442;
    border-color: #a94442;
}
.has-error .input-group-text {
    background-color: #f2dede;
}
.has-error .form-control {
    border-color: #a94442;
}
.has-success {
    color: #3c763d;
    border-color: #3c763d;
}
.has-success .input-group-text {
    background-color: #dff0d8;
}
.has-success .inuput-group-text {
    border-color: #3c763d;
}
.device {
    max-width: 250px;
}
.device-online {
    color: #3c763d;
    border-color: #3c763d;
}
.device-offline {
    border-color: #a94442;
    color: #a94442;
}
</style>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-121094269-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-121094269-1');
</script>
<script>
class Request {
    static get(url, data={}) {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.open("GET", `${url}?${encodeData(data)}`, true);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.withCredentials = true;
            xhr.onload = () => resolve(checkResponse(xhr));
            xhr.onerror = () => reject(xhr.statusText);
            xhr.send();
        }).catch(() => null);
    }

    static post(url, data={}) {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.open("POST", url, true);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.withCredentials = true;
            xhr.onload = () => resolve(checkResponse(xhr));
            xhr.onerror = () => reject(xhr.statusText);
            xhr.send(encodeData(data));
        }).catch(() => null);
    }

    static put(url, data={}) {
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.open("PUT", url, true);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.withCredentials = true;
            xhr.onload = () => resolve(checkResponse(xhr));
            xhr.onerror = () => reject(xhr.statusText);
            xhr.send(encodeData(data));
        }).catch(() => null);
    }

    static delete(url, data={}) {
        console.log(data);
        return new Promise((resolve, reject) => {
            const xhr = new XMLHttpRequest();
            xhr.open("DELETE", url, true);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.withCredentials = true,
            xhr.onload = () => resolve(checkResponse(xhr));
            xhr.onerror = () => reject(xhr.statusText);
            xhr.send(encodeData(data));
        }).catch(() => null);
    }
}
Request.GET = Request.get;
Request.POST = Request.post;
Request.PUT = Request.put;
Request.DELETE = Request.delete;

function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, '\\$&');
    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
}

function encodeData(data) {
    return Object.keys(data).map(function(k) {
        return encodeURIComponent(k) + "=" + encodeURIComponent(data[k]);
    }).join('&');
}

function checkResponse(xhr) {
    if (xhr.status < 200 || xhr.status >= 300) return null;

    const contentType = xhr.getResponseHeader("Content-Type");

    if (contentType.includes("application/json")) {
        return JSON.parse(xhr.responseText);
    } else {
        return null;
    }
}
</script>
