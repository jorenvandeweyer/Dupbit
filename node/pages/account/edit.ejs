<!DOCTYPE html>
<html lang="en">

	<head>
		<%- include /usr/src/app/pages/components/head %>
	</head>

	<body>
		<%- include /usr/src/app/pages/components/header %>
        </br>
		<div class="container">
			<a class="btn btn-primary mb-3" href="/account" role="button">Back</a>

			<div class="card mx-auto mb-3" style="max-width:500px;">
				<div class="card-header"><b>Change Password</b></div>
				<div class="card-body">
					<span 
					 class="help-block float-right has-feedback" 
					 v-bind:class="[password_old.state]" 
					 v-cloak
					>
						{{password_old.label}}
					</span>
					<div 
					 class="input-group has-feedback mb-3"
					 v-bind:class="[password_old.state]"
					>
						<div class="input-group-prepend">
							<span class="input-group-text"><i class="fas fa-lock"></i></span>
						</div>
						<input 
						 type="password" 
						 class="form-control" 
						 placeholder="Old password" 
						 v-model="password_old.data"
						 @input="clearOldPassword()"
						>
						<!-- <div class="input-group-append">
							<span class="input-group-text"><i class="fas fa-check"></i></span>
						</div> -->
					</div>
					<span 
					 class="help-block float-right has-feedback" 
					 v-bind:class="[password_new.state]" 
					 v-cloak
					>
						{{password_new.label}}
					</span>
					<div 
					 class="input-group has-feedback mb-3" 
					 v-bind:class="[password_new.state]"
					>
						<div class="input-group-prepend">
							<span class="input-group-text"><i class="fas fa-lock"></i></span>
						</div>
						<input 
						 type="password" 
						 class="form-control" 
						 placeholder="New password" 
						 v-model="password_new.data" 
						 @input="checkPassword()"
						>
					</div>
					<span 
					 class="help-block float-right has-feedback"
					 v-bind:class="[password_confirm.state]" 
					 v-cloak
					>
						{{password_confirm.label}}
					</span>
					<div 
					 class="input-group has-feedback mb-3" 
					 v-bind:class="[password_confirm.state]"
					>
						<div class="input-group-prepend">
							<span class="input-group-text"><i class="fas fa-lock"></i></span>
						</div>
						<input 
						 type="password" 
						 class="form-control" 
						 placeholder="Confirm new password" 
						 v-model="password_confirm.data" 
						 @input="checkPassword()"
						>
					</div>
					<div class="input-group">
						<button 
						 class="btn btn-primary" 
						 @click="changePassword()" 
						 :disabled="!showPasswordButton()" 
						 style="margin-left: auto"
						>
							Confirm
						</button>
					</div>
				</div>
			</div>
			<div class="card mx-auto mb-3" style="max-width:500px;">
				<div class="card-header"><b>Change Email</b></div>
				<div class="card-body">
					<div class="mb-3">
						<span v-cloak>Current email: {{current_email}}</span>
					</div>
					<span 
					 class="help-block float-right has-feedback" 
					 v-bind:class="[email.state]" 
					 v-cloak
					>
						{{email.label}}
					</span>
					<div 
					 class="input-group has-feedback mb-3" 
					 v-bind:class="[email.state]"
					>
						<div class="input-group-prepend">
							<span class="input-group-text"><i class="fas fa-envelope"></i></span>
						</div>
						<input 
						 type="text" 
						 class="form-control" 
						 placeholder="Email" 
						 v-model="email.data"
						 @input="checkEmail()"
						>
					</div>
					<div class="input-group">
						<button 
						 class="btn btn-primary" 
						 @click="changeEmail()" 
						 :disabled="!showEmailButton()" 
						 style="margin-left: auto"
						>
							Confirm
						</button>
					</div>
				</div>
			</div>
			<div class="card mx-auto" style="max-width:500px;">
				<div class="card-header"><b>Change Username</b></div>
				<div class="card-body">
					<div class="mb-3">
						<span v-cloak>Current username: {{current_username}}</span>
					</div>
					<span 
					 class="help-block float-right has-feedback" 
					 v-bind:class="[username.state]" 
					 v-cloak
					>
						{{username.label}}
					</span>					
					<div 
					 class="input-group mb-3 has-feedback" 
					 v-bind:class="[username.state]"
					>
						<div class="input-group-prepend">
							<span class="input-group-text"><i class="fas fa-user"></i></span>
						</div>
						<input 
						 type="text" 
						 class="form-control" 
						 placeholder="New username" 
						 v-model="username.data"
						 @input="checkUsername()"
						>
					</div>
					<div class="input-group">
						<button 
						 class="btn btn-primary" 
						 @click="changeUsername()" 
						 :disabled="!showUsernameButton()" 
						 style="margin-left: auto"
						>
							Confirm
						</button>
					</div>
				</div>
			</div>
			<div class="modal fade" role="dialog">
				<div class="modal-dialog">
					<div class="modal-content">
						<div class="modal-header">
							<h4 class="modal-title">Password changed!</h4>
							<button 
							 type="button" 
							 class="close" 
							 data-dismiss="modal"
							 @click="cancelDestroySessions()"
							>
								&times;
							</button>
						</div>
						<div class="modal-body">
							<p>Your password got changed succesfully.</p>
							<p>Do you want to destroy <b>all</b> sessions? This means that you need to login again on each device and that all API keys will be revoked.</p>
							<p>You can also delete each access token individually <a href="/account/tokens">here</a></p>
						</div>
						<div class="modal-footer">
							<button 
							class="btn btn-danger" 
							data-dismiss="modal"
							@click="destroySessions()"
							> 
								Destroy Sessions
							</button>
							<button 
							 class="btn btn-success" 
							 data-dismiss="modal"
							 @click="cancelDestroySessions()"
							> 
								Keep Sessions 
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>
        </br>
        <%- include /usr/src/app/pages/components/footer %>
		<script>
const labels = {
	"password.currentlabel": "<%= lang['password.currentlabel'] %>",
	"password.help": "<%= lang['password.help'] %>",
	"password.confirmhelp": "<%= lang['password.confirmhelp'] %>",
	"email.new": "<%= lang['email.new'] %>",
	"username.new": "<%= lang['username.new'] %>",
};
const vm = new Vue({
	el: ".container",
	data: {
		current_username: "<%= user.username %>",
		current_email: "<%= user.email %>",
		password_old: {
			data: "",
			label: labels["password.currentlabel"],
			icon: "",
			state: "",
		},
		password_new: {
			data: "",
			label: labels["password.help"],
			icon: "",
			state: "",
		},
		password_confirm: {
			data: "",
			label: labels["password.confirmhelp"],
			icon: "",
			state: "",
		},
		username: {
			data: "",
			label: labels["username.new"],
			icon: "",
			state: "",
		},
		email: {
			data: "",
			label: labels["email.new"],
			icon: "",
			state: "",
		},
	},
	methods: {
		changePassword: async function() {
			const result = await Request.POST("/api/account/changePassword", {
				oldpassword: this.password_old.data,
				newpassword: this.password_new.data,
				newpasswordconfirm: this.password_confirm.data,
			});

			if (result && result.success) {
				this.destroyHash = result.hash;
				this.password_old.data = "";
				this.password_old.state = "";
				this.password_old.label = labels["password.currentlabel"];
				this.password_new.data = "";
				this.password_new.state = "";
				this.password_new.label = labels["password.help"];
				this.password_confirm.data = "";
				this.password_confirm.state = "";
				this.password_confirm.label = labels["password.confirmhelp"];
				this.showDestroySessions();
			} else {
				if (result.password_old && result.password_old.length) {
					this.password_old.label = result.password_old.join(" ");
					this.password_old.state = "has-error";
				}
				if (result.password && result.password.length) {
					this.password_new.label = result.password.join(" ");
					this.password_new.state = "has-error";
				}
				if (result.passwordconfirm && result.passwordconfirm.length) {
					this.password_confirm.label = result.passwordconfirm.join(" ");
					this.password_confirm.state = "has-error";
				}
			}
		},
		changeUsername: async function() {
			const result = await Request.POST("/api/account/changeUsername", {
				name: this.username.data,
			});

			if (result && result.success) {
				this.current_username = result.new_username;
				this.username.data = "";
				this.username.state = "";
				this.username.label = labels["username.new"];
			} else {
				if (result.username && result.username.length) {
					this.username.label = result.username.join(" ");
					this.username.state = "has-error";
				}
			}
		},
		changeEmail: async function() {
			console.log("changeemail");
		},
		destroySessions: async function() {
			const result = await Request.POST("/api/account/destroySessions", {
				hash: this.destroyHash,
			});

			if (result) {
				gotoPath("/login");
			} else {
				//fail
			}
		},
		showDestroySessions: function() {
			$(".modal").modal("show");
		},
		cancelDestroySessions: function () {
			this.destoryHash = "";
		},
		clearOldPassword: function() {
			if (this.password_old.data.length) {
				this.password_old.state = "";
				this.password_old.label = labels["password.currentlabel"];
			}
		},
		checkPassword: async function() {
			const result = await Request.POST("/api/account/verify", {
				password: this.password_new.data,
				confirmpassword: this.password_confirm.data,
			});

			if (!result || !result.success)
				return;
		
			if (result.password) {
				if (result.password.length) {
					this.password_new.state = "has-error";
					this.password_new.label = result.password.join(" ");
				} else {
					this.password_new.state = "has-success";
					this.password_new.label = labels["password.help"];
				}
			} else {
				this.password_new.state = "";
				this.password_new.label = labels["password.help"];
			}

			if (result.confirmpassword) {
				if (result.confirmpassword.length) {
					this.password_confirm.state = "has-error";
					this.password_confirm.label = result.confirmpassword.join(" ");
				} else {
					this.password_confirm.state = "has-success";
					this.password_confirm.label = labels["password.confirmhelp"];
				}
			} else {
				this.password_confirm.state = "";
				this.password_confirm.label = labels["password.confirmhelp"];
			}
		},
		checkUsername: async function() {
			const result = await Request.POST("/api/account/verify", {
				username: this.username.data,
			});

			if (!result || !result.success)
				return;

			if (result.username) {
				if (result.username.length) {
					this.username.state = "has-error";
					this.username.label = result.username.join(" ");
				} else {
					this.username.state = "has-success";
					this.username.label = labels["username.new"];
				}
			} else {
				this.username.state = "";
				this.username.label = labels["username.new"];
			}
		},
		checkEmail: async function() {
			const result = await Request.POST("/api/account/verify", {
				email: this.email.data,
			});

			if (!result || !result.success)
				return;

			if (result.email) {
				if (result.email.length) {
					this.email.state = "has-error";
					this.email.label = result.email.join(" ");
				} else {
					this.email.state = "has-success";
					this.email.label = labels["email.new"];
				}
			} else {
				this.email.state = "";
				this.email.label = labels["email.new"];
			}
		},
		showPasswordButton: function() {
			const pold = this.password_old;
			const pnew = this.password_new;
			const pconfirm = this.password_confirm;

			if (!pold.data.length || !pnew.data.length || !pconfirm.data.length) 
				return false;
			if (pnew.state !== "has-success" || pconfirm.state !== "has-success")
				return false;
			return true;
		},
		showEmailButton: function() {
			return (this.email.data.length && this.email.state === "has-success");
		},
		showUsernameButton: function() {
			return (this.username.data.length && this.username.state === "has-success");
		}
	},
});
		</script>
	</body>
</html>
