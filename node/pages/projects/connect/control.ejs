<!DOCTYPE html>
<html lang="en">
    <head>
        <%- include ../../components/head %>
        <style>
            .slider {
                -webkit-appearance: none;
                width: 70%;
                height: 15px;
                margin: 5px;
                border-radius: 5px;
                background: #d3d3d3;
                outline: none;
                opacity: 0.7;
                -webkit-transition: .2s;
                transition: opacity .2s;
            }
            .slider::-webkit-slider-thumb {
                -webkit-appearance: none;
                appearance: none;
                width: 25px;
                height: 25px;
                border-radius: 50%;
                background: #4CAF50;
                cursor: pointer;
            }
            .slider::-moz-range-thumb {
                width: 25px;
                height: 25px;
                border-radius: 50%;
                background: #4CAF50;
                cursor: pointer;
            }
            .volume-buttons {
                margin: 5px;
                width: 80px;
                height: 25px;
                display: flex !important;
                align-items: center;
                justify-content: center;
            }
            .volume-up-helper {
                 position: absolute;
                 left: 10px;
            }
            .slidecontainer {
                position: relative
            }
            .action-buttons {
                margin: 2px;
            }
       </style>
    </head>
    <body>
        <%- include ../../components/header %>
        <br>
        <div class="container" id="youtube">

        </div>
        <div class="container" id="devices">

        </div>

        <div class="modal fade" id="device_modal" tabindex="-1" role="dialog" aria-labelledby="device_modal_label" aria-hidden="true">
            <div class="modal-dialog modal-sm" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="device_modal_label">Modal title</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="slidecontainer d-flex justify-content-center">
                            <i class="fas fa-volume-up volume-up-helper" style="margin:5px"> </i> <input type="range" min="0" max="20" value="10" class="slider" id="slider">
                        </div>

                        <div class="d-flex justify-content-center">
                            <button type="button" class="btn btn-primary btn-sm volume-buttons" onclick="modal.toggleMute()">
                                <i class="fas fa-volume-off"></i>
                            </button>
                            <button id="volume-down" type="button" class="btn btn-primary btn-sm volume-buttons" ontouchstart="slider.changeVolume(false)" onmousedown="slider.changeVolume(false)">
                                <i class="fas fa-volume-down"></i>
                            </button>
                            <button id="volume-up"type="button" class="btn btn-primary btn-sm volume-buttons" ontouchstart="slider.changeVolume(true)" onmousedown="slider.changeVolume(true)">
                                <i class="fas fa-volume-up"></i>
                            </button>
                        </div>

                        <hr/>
                        <div><button type="button" class="btn btn-outline-dark action-buttons" onclick="device.displaysleep()">
                            <i class="fas fa-desktop text-primary"></i> Turn Off Screen
                        </button></div>
                        <div><button type="button" class="btn btn-outline-dark action-buttons" onclick="device.lock()">
                            <i class="fas fa-lock text-primary"></i> Lock Device</a>
                        </button></div>
                        <div><button type="button" class="btn btn-outline-dark action-buttons" onclick="device.unlock()">
                            <i class="fas fa-lock-open text-primary"></i> Unlock Device</a>
                        </button></div>
                        <hr/>
                        <div><button type="button" class="btn btn-outline-dark" onclick="device.shutdown()">
                            <i class="fas fa-power-off text-primary"></i> Power Off Machine
                        </button></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>

        </br>

        <div class="container">
            <a class="btn btn-primary" href="/account/tokens">
                Manage tokens
            </a>
        </div>

        <%- include ../../components/footer %>
    </body>

    <script>
    function openDeviceModal(tid) {
        modal.tid = tid;
        $('#device_modal').modal();
        modal.setTitle("Device x");
        volume.getVolume(tid).then((feedback) => {
            slider.el.value = feedback.volume/5;
            const volumeup = document.getElementById("volume-up").disabled = feedback.mute;
            const volumedown = document.getElementById("volume-down").disabled = feedback.mute;
        }).catch(() => {});
        slider.el.oninput = function() {
            volume.update(this.value*5);
        }
    }

    const slider = {
        delay: 300,
        initialDelay: 300,
        multiplier: 0.2,
        timerIsRunning: false,
        el: document.getElementById("slider"),
        holdtimer: null,
        changeVolume: function(up) {
            if (this.el.disabled) return;

            if (up && this.el.value < 20) {
                this.el.value++;
                volume.update(this.el.value*5);
            } else if (!up && this.el.value > 0) {
                this.el.value--;
                volume.update(this.el.value*5);
            }

            this.holdTimer = setTimeout(() => { this.changeVolume(up) }, this.delay);

            this.delay = this.delay * this.multiplier;
            if (this.delay < 35) this.delay = 35;

            if (!this.timerIsRunning) {
                document.onmouseup = () => {
                    slider.clear();
                }

                document.ontouchend = () => {
                    slider.clear();
                }
                this.timerIsRunning = true;
            }
        },
        clear: function() {
            clearTimeout(this.holdTimer);
            document.onmouseup = null;
            document.ontouchend = null;
            this.timerIsRunning = false;
            this.delay = this.initialDelay + 0;
        },
    }

    const modal = {
        tid: null,
        mute: false,
        setTitle: (title) => {
            document.getElementById("device_modal_label").innerText = title;
        },
        toggleMute: () => {
            this.mute = !this.mute;
            const volumeup = document.getElementById("volume-up").disabled = mute;
            const volumedown = document.getElementById("volume-down").disabled = mute;
            slider.el.disabled = mute;
        },
    };

    const youtube = {
        muteVideo: (token_id) => {
            Request.POST("/api/connect/interact", {
                name: "youtube",
                action: "setVolume",
                value: "0",
                tid: token_id,
            }).then((data) => {
                console.log(data);
            });
        },
        unmuteVideo: (token_id) => {
            Request.POST("/api/connect/interact", {
                name: "youtube",
                action: "setVolume",
                value: "100",
                tid: token_id,
            }).then((data) => {
                console.log(data);
            });
        },
        pauseVideo: (token_id) => {
            Request.POST("/api/connect/interact", {
                name: "youtube",
                action: "pauseVideo",
                tid: token_id,
            }).then((data) => {
                console.log(data);
            });
        },
        playVideo: (token_id) => {
            Request.POST("/api/connect/interact", {
                name: "youtube",
                action: "playVideo",
                tid: token_id,
            }).then((data) => {
                console.log(data);
            });
        },
        nextVideo: (token_id) => {
            Request.POST("/api/connect/interact", {
                name: "youtube",
                action: "nextVideo",
                tid: token_id,
            }).then((data) => {
                console.log(data);
            });
        },
        previousVideo: (token_id) => {
            Request.POST("/api/connect/interact", {
                name: "youtube",
                action: "previousVideo",
                tid: token_id,
            }).then((data) => {
                console.log(data);
            });
        },
    };

    const volume = {
        fire: false,
        value: null,
        last_value: null,
        timerRunning: false,
        update: function(value) {
            this.fire = true;
            this.value = value;
            console.log(value);
            this.start();
        },
        start: function() {
            if (this.value === this.last_value) return;
            if (!this.timerRunning) {
                this.setVolume();
                this.timer = setTimeout(function() {
                    volume.timerRunning = false;
                    volume.start();
                }, 200);
                this.timerRunning = true;
            }
        },
        setVolume: function() {
            this.last_value = this.value,
            Request.POST("/api/connect/interact", {
                name: "volume",
                action: "set",
                value: this.value,
                tid: modal.tid,
            }).then((data) => {
                console.log(data);
            });
        },
        getVolume: (tid) => {
            return Request.POST("/api/connect/interact", {
                name: "volume",
                action: "get",
                tid: modal.tid,
            });
        }
    };

    const device = {
        displaysleep: () => {
            Request.POST("/api/connect/interact", {
                name: "screen",
                action: "displaysleep",
                tid: modal.tid,
            }).then((data) => {
                console.log(data);
            });
        },
        lock: () => {
            Request.POST("/api/connect/interact", {
                name: "screen",
                action: "lock",
                tid: modal.tid,
            }).then((data) => {
                console.log(data);
            });
        },
        unlock: () => {
            Request.POST("/api/connect/interact", {
                name: "screen",
                action: "unlock",
                tid: modal.tid,
            }).then((data) => {
                console.log(data);
            });
        },
        shutdown: () => {
            Request.POST("/api/connect/interact", {
                name: "device",
                action: "shutdown",
                tid: modal.tid,
            }).then((data) => {
                console.log(data);
            });
        }
    }

    async function fetchDevices() {
        return await Request.GET("/api/connect/devices").then(data => [data.data, data.tokens]);
    }

    async function main() {
        const [devices, tokens] = await fetchDevices()

        const sessions = devices.website;
        const desktop_app = devices.desktop_app;
        const extension = devices.extension;

        const html_youtube = createHTMLYoutube(extension);
        const html_devices = createHTMLDevices(desktop_app);
        const html_sessions = createHTMLSessions(sessions);

        document.getElementById("youtube").innerHTML = html_youtube;
        document.getElementById("devices").innerHTML = html_devices;
    }

    function createHTMLYoutube(extension) {
        const youtube_arr = [];

        for(let tid in extension) {
            const html = createYoutube(tid);
            youtube_arr.push(html);
        }

        return youtube_arr.join("");
    }

    function createHTMLSessions(sessions) {

    }

    function createHTMLDevices(devices) {
        devices_arr = [];

        for(let app in devices) {
            const token = devices[app];
            const html = createDevice(token);
            devices_arr.push(html);
        }

        return `<div class="row">${devices_arr.join("</br>")}</div>`;
    }

    function createYoutube(token_id) {
        return `<div class="btn-group btn-group">
          <button class="btn btn-danger"><i class="fab fa-youtube"></i> <b>Youtube</b></button>
          <button type="button" class="btn btn-danger" onclick="youtube.previousVideo(${token_id})"><i class="fas fa-step-backward"></i></button>
          <button type="button" class="btn btn-danger" onclick="youtube.playVideo(${token_id})"><i class="fas fa-play"></i></button>
          <button type="button" class="btn btn-danger" onclick="youtube.pauseVideo(${token_id})"><i class="fas fa-pause"></i></button>
          <button type="button" class="btn btn-danger" onclick="youtube.nextVideo(${token_id})"><i class="fas fa-step-forward"></i></button>
          <button type="button" class="btn btn-danger" onclick="youtube.muteVideo(${token_id})"><i class="fas fa-volume-up"></i></button>
          <button type="button" class="btn btn-danger" onclick="youtube.unmuteVideo(${token_id})"><i class="fas fa-volume-off"></i></button>
          <button type="button" class="btn btn-danger"><input type="text"></input></button>
          <button type="button" class="btn btn-danger"><i class="fas fa-search"></i></button>
        </div>`;
    }

    function createDevice(token) {
        const status = token.online ? "device-online" : "device-offline";
        const color_background = token.online ? "#67e570" : "#e83535";
        const disabled = token.online ? "" : "disabled";
        return `<div class="col">
            <div id=${token.id} class="card device ${status}">
            <img class="card-img-top" src="/images/connect/${token.info.os_parsed}.png" alt="Card image cap">
            <div class="card-header" style="background-color:${color_background};">
            <b style="color:black;">${token.info.name}</b>
            <button type="button" class="btn btn-info" onclick="openDeviceModal(${token.id})" ${disabled}>
                Open Device
            </button>
            </div>
            </div>
            </div>`;
    }

    main();

    document.addEventListener('touchmove', function(event) {
        event = event.originalEvent || event;
        if (event.scale !== 1) {
           event.preventDefault();
        }
    }, false);
    </script>

</html>
